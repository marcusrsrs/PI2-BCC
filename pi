#include <stdio.h>
#include <stdlib.h>
#include <string.h> // Para memset
#include <allegro5/allegro5.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_primitives.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_ttf.h>
#include <allegro5/keyboard.h>
#include <allegro5/allegro_audio.h>
#include <allegro5/allegro_acodec.h>

float between_f(float lo, float hi)
{
    return lo + ((float)rand() / (float)RAND_MAX) * (hi - lo);
}

// Definindo os tamanhos das partes da sprite
#define SPRITE_WIDTH 48
#define SPRITE_HEIGHT 64

void must_init(int test, const char* description)
{
    if (test) return;
    printf("couldn't initialize %s\n", description);
    exit(1);
}

// Função para verificar a colisão
int check_collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    if (x1 + w1 > x2 && x1 < x2 + w2 && y1 + h1 > y2 && y1 < y2 + h2) {
        return 1; // Colisão detectada
    }
    return 0; // Sem colisão
}

int main()
{
    ALLEGRO_SAMPLE* sample_guitar = NULL;

    // Inicializando Allegro e seus addons
    must_init(al_init(), "allegro");
    must_init(al_install_keyboard(), "keyboard");
    must_init(al_install_audio(), "audio");
    must_init(al_init_acodec_addon(), "addon");
    must_init(al_init_image_addon(), "image addon");
    must_init(al_init_font_addon(), "font addon");
    must_init(al_reserve_samples(16), "reserve samples");

    ALLEGRO_DISPLAY* display = al_create_display(800, 600);
    must_init(display != NULL, "display");

    al_set_window_position(display, 200, 200);
    al_set_window_title(display, "PI");

    ALLEGRO_AUDIO_STREAM* guitar = al_load_audio_stream("./guitar.wav", 8, 2048);

    ALLEGRO_BITMAP* mario = al_load_bitmap("./mario.png");
    must_init(mario != NULL, "mario");

    ALLEGRO_BITMAP* men = al_load_bitmap("./men.png");
    must_init(men != NULL, "sprite");

    ALLEGRO_BITMAP* eiffel = al_load_bitmap("./eiffel.png");
    must_init(eiffel != NULL, "eiffel");

    ALLEGRO_TIMER* timer = al_create_timer(1.0 / 30.0);
    must_init(timer != NULL, "timer");

    ALLEGRO_EVENT_QUEUE* event_queue = al_create_event_queue();
    must_init(event_queue != NULL, "event queue");

    al_register_event_source(event_queue, al_get_display_event_source(display));
    al_register_event_source(event_queue, al_get_timer_event_source(timer));
    al_register_event_source(event_queue, al_get_keyboard_event_source());

    al_start_timer(timer);

    float frame = 0.f;
    int pos_x = 0, pos_y = 0;
    int current_frame_y = 0;

    int eiffel_width = al_get_bitmap_width(eiffel);
    int eiffel_height = al_get_bitmap_height(eiffel);

    al_attach_audio_stream_to_mixer(guitar, al_get_default_mixer());
    al_set_audio_stream_playmode(guitar, ALLEGRO_PLAYMODE_LOOP);
    al_set_audio_stream_playing(guitar, true);

    // Obter as dimensões do display
    int display_width = al_get_display_width(display);
    int display_height = al_get_display_height(display);

    // Obter as dimensões da imagem do Mario
    int mario_width = al_get_bitmap_width(mario);
    int mario_height = al_get_bitmap_height(mario);

    // Definir o fator de escala para diminuir a imagem do Mario
    float scale_factor = 0.10f;  // 50% do tamanho original

    // Calcular as novas dimensões de Mario após o redimensionamento
    int scaled_mario_width = mario_width * scale_factor;
    int scaled_mario_height = mario_height * scale_factor;

    while (true) {
        ALLEGRO_EVENT event;
        al_wait_for_event(event_queue, &event);

        if (event.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
            break;
        }
        else if (event.keyboard.keycode == ALLEGRO_KEY_RIGHT) {
            current_frame_y = 0;  // Posição da sprite olhando para a direita
            if (pos_x + SPRITE_WIDTH < display_width) {  // Checar se o personagem pode mover à direita
                pos_x += 20;
            }
        }
        else if (event.keyboard.keycode == ALLEGRO_KEY_LEFT) {
            current_frame_y = SPRITE_HEIGHT * 3;  // Posição da sprite olhando para a esquerda
            if (pos_x > 0) {  // Checar se o personagem pode mover à esquerda
                pos_x -= 20;
            }
        }
        else if (event.keyboard.keycode == ALLEGRO_KEY_DOWN) {
            current_frame_y = SPRITE_HEIGHT * 2;  // Posição da sprite olhando para baixo
            if (pos_y + SPRITE_HEIGHT < display_height) {  // Checar se o personagem pode mover para baixo
                pos_y += 20;
            }
        }
        else if (event.keyboard.keycode == ALLEGRO_KEY_UP) {
            current_frame_y = SPRITE_HEIGHT;  // Posição da sprite olhando para cima
            if (pos_y > 0) {  // Checar se o personagem pode mover para cima
                pos_y -= 20;
            }
        }

        frame += 0.3f;
        if (frame > 3) {
            frame -= 3;
        }

        // Limpar a tela
        al_clear_to_color(al_map_rgb(255, 255, 255));

        // Desenhar a imagem da Torre Eiffel, redimensionada para ocupar toda a tela
        al_draw_scaled_bitmap(
            eiffel,
            0, 0, eiffel_width, eiffel_height,  // Região da imagem original
            0, 0, display_width, display_height,  // Região de destino no display
            0  // Flag de qualidade
        );

        // Desenhar a sprite com animação
        al_draw_bitmap_region(
            men,
            SPRITE_WIDTH * (int)frame, current_frame_y,  // Região da sprite (frame atual)
            SPRITE_WIDTH, SPRITE_HEIGHT,  // Tamanho da região da sprite
            pos_x, pos_y, 0  // Posição na tela
        );

        // Desenhar a imagem do Mario na parte inferior com o tamanho reduzido
        al_draw_scaled_bitmap(mario, 0, 0, mario_width, mario_height,
            (display_width - scaled_mario_width) / 2, display_height - scaled_mario_height,
            scaled_mario_width, scaled_mario_height, 0); // Aqui, Mario é redimensionado para um tamanho menor

        

        

        // Atualizar a tela
        al_flip_display();
    }

    // destruir os recursos
    al_destroy_bitmap(eiffel);
    al_destroy_bitmap(men);
    al_destroy_bitmap(mario);
    al_destroy_sample(sample_guitar);
    al_destroy_display(display);
    al_destroy_event_queue(event_queue);
    al_destroy_timer(timer);

    return 0;
}
